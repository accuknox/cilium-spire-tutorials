apiVersion: v1
kind: Namespace
metadata:
  name: spire

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: spire-server
  namespace: spire

---

# Required cluster role to allow spire-server to query k8s API server
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: spire-server-cluster-role
rules:
- apiGroups: [""]
  resources: ["pods", "nodes"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "patch"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["get", "list", "patch", "watch"]

---

# Binds above cluster role to spire-server service account
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: spire-server-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: spire-server
  namespace: spire
roleRef:
  kind: ClusterRole
  name: spire-server-cluster-role
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-bundle
  namespace: spire

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-server
  namespace: spire
data:
  server.conf: |
    server {
      bind_address = "0.0.0.0"
      bind_port = "8081"
      trust_domain = "example.org"
      data_dir = "/run/spire/data"
      log_level = "DEBUG"
      default_svid_ttl = "1h"
      ca_subject = {
        country = ["US"],
        organization = ["SPIFFE"],
        common_name = "",
      }
    }

    plugins {
      DataStore "sql" {
        plugin_data {
          database_type = "sqlite3"
          connection_string = "/run/spire/data/datastore.sqlite3"
        }
      }

      NodeAttestor "k8s_psat" {
        plugin_data {
          clusters = {
            # The name must match with registrar configuration.
            "demo-cluster" = {
              service_account_allow_list = ["spire:spire-agent"]
              kube_config_file = "/tmp/kube/kube.conf"
              # use_token_review_api_validation = true
            }
          }
        }
      }

      KeyManager "disk" {
        plugin_data {
          keys_path = "/run/spire/data/keys.json"
        }
      }

      Notifier "k8sbundle" {
        plugin_data {
          # webhook_label = "spiffe.io/webhook"
        }
      }
    }

--- 

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-workload-registrar-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-workload-registrar-role
subjects:
- kind: ServiceAccount
  name: spire-server
  namespace: spire

---


apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: spire-server
  namespace: spire
  labels:
    app: spire-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spire-server
  serviceName: spire-server
  template:
    metadata:
      namespace: spire
      labels:
        app: spire-server
    spec:
      serviceAccountName: spire-server
      shareProcessNamespace: true
      containers:
        - name: spire-server
          image: gcr.io/spiffe-io/spire-server:1.0.2
          args:
            - -config
            - /run/spire/config/server.conf
          livenessProbe:
            exec:
              command: ["/opt/spire/bin/spire-server", "healthcheck"]
            failureThreshold: 2
            initialDelaySeconds: 15
            periodSeconds: 60
            timeoutSeconds: 3
          readinessProbe:
            exec:
              command: ["/opt/spire/bin/spire-server", "healthcheck", "--shallow"]
            initialDelaySeconds: 5
            periodSeconds: 5
          ports:
            - containerPort: 8081
          volumeMounts:
            - name: spire-config
              mountPath: /run/spire/config
              readOnly: true
            - name: spire-data
              mountPath: /run/spire/data
              readOnly: false
            - name: spire-registration-socket
              mountPath: /tmp
              readOnly: false
            - name: kube-config
              mountPath: /tmp/kube
              readOnly: false
      volumes:
        - name: spire-config
          configMap:
            name: spire-server
        - name: spire-agent-socket
          hostPath:
            path: /run/spire/sockets
            type: DirectoryOrCreate
        - name: k8s-workload-registrar-config
          configMap:
            name: k8s-workload-registrar
        - name: kube-config
          configMap:
            name: kube-config-map
        - name: spire-registration-socket
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: spire-data
        namespace: spire
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
---

apiVersion: v1
kind: Service
metadata:
  name: spire-server
  namespace: spire
spec:
  type: NodePort
  ports:
    - name: grpc
      port: 8081
      targetPort: 8081
      protocol: TCP
  selector:
    app: spire-server

--- 

apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-config-map
  namespace: spire
data:
  kube.conf: |
    apiVersion: v1
    clusters:
    - cluster:
        certificate-authority-data: {{ .Values.certificateAuthorityData }}
        extensions:
        - extension:
            last-update: Wed, 13 Oct 2021 14:25:08 -03
            provider: minikube.sigs.k8s.io
            version: v1.21.0
          name: cluster_info
        server: {{ .Values.clusterAddress }}
      name: cluster1
    contexts:
    - context:
        cluster: cluster1
        extensions:
        - extension:
            last-update: Wed, 13 Oct 2021 14:25:08 -03
            provider: minikube.sigs.k8s.io
            version: v1.21.0
          name: context_info
        namespace: default
        user: {{ .Values.user }} 
      name: cluster1
    current-context: cluster1
    kind: Config
    preferences: {}
    users:
    - name: {{ .Values.user }} 
      user:
        token: {{ .Values.token }}
